{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\AlgoPath-Explorer\\\\algopathexplorer\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { AStar } from '../algorithms/aStar';\nimport { dfs } from '../algorithms/dfs';\nimport { bfs } from '../algorithms/bfs';\nimport './PathfindingVisualizer.css';\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    /******************** Set up the initial grid ********************/\n    this.getInitialGrid = (rowCount = this.state.ROW_COUNT, colCount = this.state.COLUMN_COUNT) => {\n      const initialGrid = [];\n      for (let row = 0; row < rowCount; row++) {\n        const currentRow = [];\n        for (let col = 0; col < colCount; col++) {\n          currentRow.push(this.createNode(row, col));\n        }\n        initialGrid.push(currentRow);\n      }\n      return initialGrid;\n    };\n    this.createNode = (row, col) => {\n      return {\n        row,\n        col,\n        isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n        isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n        distance: Infinity,\n        distanceToFinishNode: Math.abs(this.state.FINISH_NODE_ROW - row) + Math.abs(this.state.FINISH_NODE_COL - col),\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n        isNode: true\n      };\n    };\n    this.state = {\n      grid: [],\n      START_NODE_ROW: 5,\n      FINISH_NODE_ROW: 5,\n      START_NODE_COL: 5,\n      FINISH_NODE_COL: 15,\n      mouseIsPressed: false,\n      ROW_COUNT: 25,\n      COLUMN_COUNT: 35,\n      MOBILE_ROW_COUNT: 10,\n      MOBILE_COLUMN_COUNT: 20,\n      isRunning: false,\n      isStartNode: false,\n      isFinishNode: false,\n      isWallNode: false,\n      // xxxxxxx\n      currRow: 0,\n      currCol: 0,\n      isDesktopView: true\n    };\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  toggleIsRunning() {\n    this.setState({\n      isRunning: !this.state.isRunning\n    });\n  }\n  toggleView() {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.clearWalls();\n      const isDesktopView = !this.state.isDesktopView;\n      let grid;\n      if (isDesktopView) {\n        grid = this.getInitialGrid(this.state.ROW_COUNT, this.state.COLUMN_COUNT);\n        this.setState({\n          isDesktopView,\n          grid\n        });\n      } else {\n        if (this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT || this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT || this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT || this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT) {\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\n        } else {\n          grid = this.getInitialGrid(this.state.MOBILE_ROW_COUNT, this.state.MOBILE_COLUMN_COUNT);\n          this.setState({\n            isDesktopView,\n            grid\n          });\n        }\n      }\n    }\n  }\n  /******************** Control mouse events ********************/\n  handleMouseDown(row, col) {\n    if (!this.state.isRunning) {\n      if (this.isGridClear()) {\n        if (document.getElementById(`node-${row}-${col}`).className === 'node node-start') {\n          this.setState({\n            mouseIsPressed: true,\n            isStartNode: true,\n            currRow: row,\n            currCol: col\n          });\n        } else if (document.getElementById(`node-${row}-${col}`).className === 'node node-finish') {\n          this.setState({\n            mouseIsPressed: true,\n            isFinishNode: true,\n            currRow: row,\n            currCol: col\n          });\n        } else {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid,\n            mouseIsPressed: true,\n            isWallNode: true,\n            currRow: row,\n            currCol: col\n          });\n        }\n      } else {\n        this.clearGrid();\n      }\n    }\n  }\n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n        if (nodeClassName === 'node node-visited' || nodeClassName === 'node node-shortest-path') {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  handleMouseEnter(row, col) {\n    if (!this.state.isRunning) {\n      if (this.state.mouseIsPressed) {\n        const nodeClassName = document.getElementById(`node-${row}-${col}`).className;\n        if (this.state.isStartNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevStartNode = this.state.grid[this.state.currRow][this.state.currCol];\n            prevStartNode.isStart = false;\n            document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = 'node';\n            this.setState({\n              currRow: row,\n              currCol: col\n            });\n            const currStartNode = this.state.grid[row][col];\n            currStartNode.isStart = true;\n            document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          }\n          this.setState({\n            START_NODE_ROW: row,\n            START_NODE_COL: col\n          });\n        } else if (this.state.isFinishNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevFinishNode = this.state.grid[this.state.currRow][this.state.currCol];\n            prevFinishNode.isFinish = false;\n            document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = 'node';\n            this.setState({\n              currRow: row,\n              currCol: col\n            });\n            const currFinishNode = this.state.grid[row][col];\n            currFinishNode.isFinish = true;\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n          }\n          this.setState({\n            FINISH_NODE_ROW: row,\n            FINISH_NODE_COL: col\n          });\n        } else if (this.state.isWallNode) {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid\n          });\n        }\n      }\n    }\n  }\n  handleMouseUp(row, col) {\n    if (!this.state.isRunning) {\n      this.setState({\n        mouseIsPressed: false\n      });\n      if (this.state.isStartNode) {\n        const isStartNode = !this.state.isStartNode;\n        this.setState({\n          isStartNode,\n          START_NODE_ROW: row,\n          START_NODE_COL: col\n        });\n      } else if (this.state.isFinishNode) {\n        const isFinishNode = !this.state.isFinishNode;\n        this.setState({\n          isFinishNode,\n          FINISH_NODE_ROW: row,\n          FINISH_NODE_COL: col\n        });\n      }\n      this.getInitialGrid();\n    }\n  }\n  handleMouseLeave() {\n    if (this.state.isStartNode) {\n      const isStartNode = !this.state.isStartNode;\n      this.setState({\n        isStartNode,\n        mouseIsPressed: false\n      });\n    } else if (this.state.isFinishNode) {\n      const isFinishNode = !this.state.isFinishNode;\n      this.setState({\n        isFinishNode,\n        mouseIsPressed: false\n      });\n    } else if (this.state.isWallNode) {\n      const isWallNode = !this.state.isWallNode;\n      this.setState({\n        isWallNode,\n        mouseIsPressed: false\n      });\n      this.getInitialGrid();\n    }\n  }\n\n  /******************** Clear Board/Walls ********************/\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish' && nodeClassName !== 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (nodeClassName === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = 0;\n          }\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName === 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n\n  /******************** Create Animations ********************/\n  visualize(algo) {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n          break;\n        case 'AStar':\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\n          break;\n        default:\n          // should never get here\n          break;\n      }\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n        if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  /******************** Create path from start to finish ********************/\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar navbar-expand-lg navbar-green bg-dark \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"navbar-brand\",\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 13\n      }\n    }, \"PathFinding Visualizer\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"navbar-toggler\",\n      type: \"button\",\n      \"data-toggle\": \"collapse\",\n      \"data-target\": \"#navbarNav\",\n      \"aria-controls\": \"navbarNav\",\n      \"aria-expanded\": \"false\",\n      \"aria-label\": \"Toggle navigation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"navbar-toggler-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"collapse navbar-collapse\",\n      id: \"navbarNav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"navbar-nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"nav-link\",\n      href: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }\n    }, ' ', \"PathFinder Visualizer code\", ' ')), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"nav-link\",\n      href: \"https://github.com/hari659tri\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }\n    }, \"Check Out Other Cool Projects\"))))), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"grid-container\",\n      onMouseLeave: () => this.handleMouseLeave(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 17\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(row, col),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 23\n          }\n        });\n      }));\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger\",\n      onClick: () => this.clearGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }\n    }, \"Clear Grid\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-warning\",\n      onClick: () => this.clearWalls(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }\n    }, \"Clear Walls\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.visualize('Dijkstra'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }\n    }, \"Dijkstra's\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.visualize('AStar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }\n    }, \"A*\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.visualize('BFS'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }\n    }, \"Bread First Search\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.visualize('DFS'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }\n    }, \"Depth First Search\"), this.state.isDesktopView ? /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-light\",\n      onClick: () => this.toggleView(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 11\n      }\n    }, \"Mobile View\") : /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-dark\",\n      onClick: () => this.toggleView(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }\n    }, \"Desktop View\"));\n  }\n}\n\n/******************** Create Walls ********************/\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isStart && !node.isFinish && node.isNode) {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["React","Component","Node","dijkstra","AStar","dfs","bfs","PathfindingVisualizer","constructor","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","row","currentRow","col","push","createNode","isStart","START_NODE_ROW","START_NODE_COL","isFinish","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","distanceToFinishNode","Math","abs","isVisited","isWall","previousNode","isNode","grid","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","componentDidMount","setState","toggleView","clearGrid","clearWalls","alert","isGridClear","document","getElementById","className","newGrid","getNewGridWithWallToggled","node","nodeClassName","handleMouseEnter","prevStartNode","currStartNode","prevFinishNode","currFinishNode","handleMouseUp","slice","visualize","algo","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","getNodesInShortestPathOrder","animate","i","length","setTimeout","animateShortestPath","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","href","type","id","onMouseLeave","map","rowIdx","key","nodeIdx","onMouseDown","onMouseEnter","onMouseUp","onClick","newNode","currentNode","unshift"],"sources":["C:/Users/HP/Desktop/AlgoPath-Explorer/algopathexplorer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {AStar} from '../algorithms/aStar';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {bfs} from '../algorithms/bfs';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 5,\r\n      FINISH_NODE_ROW: 5,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 15,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      MOBILE_ROW_COUNT: 10,\r\n      MOBILE_COLUMN_COUNT: 20,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n      isDesktopView: true,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  toggleView() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.clearWalls();\r\n      const isDesktopView = !this.state.isDesktopView;\r\n      let grid;\r\n      if (isDesktopView) {\r\n        grid = this.getInitialGrid(\r\n          this.state.ROW_COUNT,\r\n          this.state.COLUMN_COUNT,\r\n        );\r\n        this.setState({isDesktopView, grid});\r\n      } else {\r\n        if (\r\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\r\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n        ) {\r\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\r\n        } else {\r\n          grid = this.getInitialGrid(\r\n            this.state.MOBILE_ROW_COUNT,\r\n            this.state.MOBILE_COLUMN_COUNT,\r\n          );\r\n          this.setState({isDesktopView, grid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-green bg-dark \">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <b>PathFinding Visualizer</b>\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <a\r\n                  className=\"nav-link\"\r\n                  href=\"\">\r\n                  {' '}\r\n                  PathFinder Visualizer code{' '}\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"https://github.com/hari659tri\">\r\n                  Check Out Other Cool Projects\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n\r\n        <table\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <tbody className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          onClick={() => this.clearGrid()}>\r\n          Clear Grid\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning\"\r\n          onClick={() => this.clearWalls()}>\r\n          Clear Walls\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('Dijkstra')}>\r\n          Dijkstra's\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('AStar')}>\r\n          A*\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('BFS')}>\r\n          Bread First Search\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          onClick={() => this.visualize('DFS')}>\r\n          Depth First Search\r\n        </button>\r\n        {this.state.isDesktopView ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-light\"\r\n            onClick={() => this.toggleView()}>\r\n            Mobile View\r\n          </button>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark\"\r\n            onClick={() => this.toggleView()}>\r\n            Desktop View\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}